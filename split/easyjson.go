package split

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/pkg/errors"

	"github.com/kubewarden/k8s-objects-generator/project"
)

type walkerStateEasyjsonData struct {
	project project.Project
}

func GenerateEasyjsonFiles(project project.Project, plan *RefactoringPlan) error {
	if err := project.PrepareEasyjsonEnv(); err != nil {
		return err
	}

	dependenciesGraph, err := plan.DependenciesGraph()
	if err != nil {
		return err
	}

	stateData := walkerStateEasyjsonData{
		project: project,
	}
	state := NewGeneratorState(dependenciesGraph, stateData)

	if err := WalkGraph(&state, easyjsonGenerateHelpersVisitorFn); err != nil {
		return errors.Wrapf(err, "cannot generate swagger files")
	}

	return nil
}

func findEasyjsonTargets(root string) ([]string, error) {
	easyjsonTargets := []string{}

	walkDirFn := func(path string, d os.DirEntry, err error) (e error) {
		if !d.IsDir() {
			// Do not add files generated by easyjson
			if !strings.Contains(path, "easyjson") && filepath.Ext(path) == ".go" {
				easyjsonTargets = append(easyjsonTargets, path)
			}
		}
		return nil
	}
	if err := filepath.WalkDir(root, walkDirFn); err != nil {
		return []string{}, err
	}

	return easyjsonTargets, nil
}

func easyjsonGenerateHelpersVisitorFn(nodeID string, state *GeneratorState) error {
	if state.VisitedNodes.Contains(nodeID) {
		return nil
	}
	fmt.Printf("Generating easyjson helpers for module %s\n", nodeID)

	// Fist, ensure all the dependencies are generated
	ancestors, err := state.DependenciesGraph.GetOrderedAncestors(nodeID)
	if err != nil {
		return fmt.Errorf("Cannot compute dependency graph of %s: %+v", nodeID, err)
	}

	fmt.Printf("Ordered list of dependencies: %+v\n", ancestors)
	for _, ancestor := range ancestors {
		if err := easyjsonGenerateHelpersVisitorFn(ancestor, state); err != nil {
			return err
		}
	}

	// Now let's generate the actual namespace
	fmt.Printf("Generate %s\n", nodeID)

	stateData := state.Data.(walkerStateEasyjsonData)

	moduleDir := filepath.Join(stateData.project.Root, nodeID)
	targets, err := findEasyjsonTargets(moduleDir)
	if err != nil {
		return fmt.Errorf("Cannot find easyjson target files inside of %s: %v",
			moduleDir, err)
	}
	log.Printf("Easyjson processing module %s", nodeID)
	log.Printf("Generating easyjson files for %d files\n", len(targets))
	if err := stateData.project.RunEasyJson(targets); err != nil {
		return errors.Wrapf(err, "cannot generate easyjson helper files for module %s", nodeID)
	}
	state.VisitedNodes.Add(nodeID)

	return nil
}
